"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def even_odd(num):
    def odd(num):
        if num // 10 == 0:
            return 1 if num % 2 else 0
        return odd(num % 10) + odd(num // 10)

    def even(num):
        if num // 10 == 0:
            return 0 if num % 2 else 1
        return even(num % 10) + even(num // 10)

    return even(num), odd(num)


'''Получилась функция с двумя рекурсивными. Лучше не смог придумать'''
# def even_odd(num):
#
#     def odd(num):
#         return 1 if num % 10 else 0 if num // 10 == 0 else odd(num % 10) + odd(num // 10)
#
#     def even(num):
#         return 0 if num % 10 else 1 if num // 10 == 0 else odd(num % 10) + odd(num // 10)
#
#     return even(num), odd(num)
'''Попытался вспомнить тернарные операторы, что-то не срастается...'''


if __name__ == '__main__':
    print(even_odd(112453545345))
